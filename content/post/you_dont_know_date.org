#+title: Date 的踩坑
#+date: 2024-01-08T20:54:19+08:00
#+lastmod: 2024-01-08T20:54:19+08:00
#+draft: false
#+keywords[]: ["Date"]
#+description: ""
#+tags[]:
#+categories[]:

* new Date() 使用 date string 返回时间格式不同

碰到一个问题，计算两个时间之间的包含的月份：

- 通过 *new Date(time).getTime() / 1000* 获取秒数，然后开始结束秒数相减，获取差值

- 差值除以 *30* 天的秒数， *向下* 取整

#+begin_src typescript
  function getMonth(startDate, endDate) {
    const endSeconds = new Date(endDate).getTime() / 1000
    const startSeconds = new Date(startDate).getTime() / 1000
    const SECONDS_IN_A_MONTH = 30 * 24 * 60 * 60

    return Math.floor((endSeconds - startSeconds) / SECONDS_IN_A_MONTH)
  }

  getMonth('2023-03', '2024-03-25 01:00:00') // 12
  getMonth('2023-03', '2024-03-25 08:00:00') // 13
#+end_src

按理说，开始结束的日期相同，计算出来的月份数应该是一样的，但是发现结果相差了一个月。

#+begin_src typescript
  new Date('2024-01-01') // Mon Jan 01 2024 08:00:00 GMT+0800 (China Standard Time)
  new Date('2024-01-01 00:00:00') // Mon Jan 01 2024 00:00:00 GMT+0800 (China Standard Time)
#+end_src

#+begin_quote
When the time zone offset is absent, *date-only forms are interpreted
as a UTC time and date-time forms are interpreted as local time*. This
is due to a historical spec error that was not consistent with ISO
8601 but could not be changed due to web compatibility. See Broken
Parser – A Web Reality Issue.

--- [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format][Date time string format]]
#+end_quote

这是因为开始时间是 *2023-03*, 是 =date-only= 格式，返回的是 UTC 时间，2023-03-01 00:00:00 。

而结束时间是 *2024-01-01 00:00:00* (实际上，date string 应该写成 *2024-01-01T00:00:00*) 指定了时分秒，属于 =date-time= 格式，返回的是本地时间。

#+begin_src typescript
  // date-only forms are interpreted as a UTC time
  new Date('2023-03') // Wed Mar 01 2023 08:00:00 GMT+0800 (China Standard Time)
  new Date('2023-03-01') // Wed Mar 01 2023 08:00:00 GMT+0800 (China Standard Time)

  // date-time forms are interpreted as local time
  new Date('2023-03-01T00:00:00') // Wed Mar 01 2023 00:00:00 GMT+0800 (China Standard Time)
  new Date('2023-03-01 00:00:00') // Wed Mar 01 2023 00:00:00 GMT+0800 (China Standard Time)

  // date-only forms are interpreted as a UTC time
  new Date('2023-03').toUTCString() // 'Wed, 01 Mar 2023 00:00:00 GMT'
  new Date('2023-03-01').toUTCString() // 'Wed, 01 Mar 2023 00:00:00 GMT'

  // date-time forms are interpreted as local time
  new Date('2023-03-01T00:00:00').toUTCString() // 'Tue, 28 Feb 2023 16:00:00 GMT'
  new Date('2023-03-01 00:00:00').toUTCString() // 'Tue, 28 Feb 2023 16:00:00 GMT'
#+end_src

上面计算月份的代码会有偏差，是因为开始时间返回的是 *UTC 时间* ，而结束时间返回的是 *本地时间* 。

而 getTime() 都是按照 UTC 时间处理：

#+begin_quote
The getTime() method of Date instances returns the number of
milliseconds for this date since the epoch, which is defined as the
midnight at the beginning of January 1, 1970, UTC.
--- [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime][Date.prototype.getTime()]]
#+end_quote

#+begin_src typescript
  new Date('2023-03').toUTCString() // 'Wed, 01 Mar 2023 00:00:00 GMT'
  new Date('2024-03-25 01:00:00').toUTCString() // 'Sun, 24 Mar 2024 17:00:00 GMT'
  new Date('2024-03-25 08:00:00').toUTCString() // 'Mon, 25 Mar 2024 00:00:00 GMT'
#+end_src

2024-03-25 01:00:00 和 2024-03-25 08:00:00 相差了一天，这一天的差异，导致了计算结果的差异。

由于以 date string 形式创建 Date，得到的结果可能不同，因此最好避免用 date string ，而是用参数的形式创建:

#+begin_src typescript
  // Remember (and accept) that month is zero-indexed in JavaScript.
  new Date(2023, 02, 01) // Wed Mar 01 2023 00:00:00 GMT+0800 (China Standard Time)
  new Date('2023-03-01') // Wed Mar 01 2023 08:00:00 GMT+0800 (China Standard Time)
#+end_src

* Refs

- [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date][Date]]

- [[https://css-tricks.com/everything-you-need-to-know-about-date-in-javascript/][Everything You Need to Know About Date in JavaScript]]

- [[https://maggiepint.com/2017/04/11/fixing-javascript-date-web-compatibility-and-reality/][Fixing JavaScript Date – Web Compatibility and Reality]]
